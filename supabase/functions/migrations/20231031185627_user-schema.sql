-- alter table "public"."test" drop constraint "test_pkey";

-- drop index if exists "public"."test_pkey";

-- drop table if exists "public"."test";

create table "public"."user" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "email" text default ''::text,
    "role" text default 'user'::text,
    "from_admin_message" text default 'Hello from unifund we kindly ask you to complete your profile by  followind these steps'::text,
    "steps_to_do" text default 'Go to profile settings - Copmplete  your profile - Track your application'::text,
    "is_accepted_by_admin" boolean default false,
    "firstname" text default ''::text,
    "lastname" text default ''::text,
    "address" text default ''::text,
    "country" text default ''::text,
    "application_status" text default 'pinned'::text
);


alter table "public"."user" enable row level security;

CREATE UNIQUE INDEX user_pkey ON public."user" USING btree (user_id, id);

alter table "public"."user" add constraint "user_pkey" PRIMARY KEY using index "user_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.fill_initial_user_profile_on_sign_up()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
insert into public.user(user_id, email) values (NEW.id, NEW.email);
return NEW;
end;$function$
;

create policy "Users can update their own data "
on "public"."user"
as permissive
for update
to public
using ((user_id = auth.uid()))
with check ((user_id = auth.uid()));


create policy "user can access only his data"
on "public"."user"
as permissive
for select
to public
using ((user_id = auth.uid()));



