drop policy "user can access only his data" on "public"."user";

alter table "public"."user" drop constraint "user_pkey";

drop index if exists "public"."user_pkey";

create table "public"."profile" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "major" text,
    "university" text,
    "nationality" text,
    "files" jsonb default '"[{\"id\":\"id-card\",\"name\":\"id-card\",\"title\":\"ID / Passport\",\"status\":\"upload\"},{\"id\":\"student-proof\",\"name\":\"student-proof\",\"title\":\"Proof of student (Transaction)\",\"status\":\"upload\"}]"'::jsonb,
    "user_id" uuid not null,
    "education-degree" text,
    "description" text default ''::text
);


alter table "public"."profile" enable row level security;

CREATE UNIQUE INDEX profile_pkey ON public.profile USING btree (id);

CREATE UNIQUE INDEX profile_user_id_key ON public.profile USING btree (user_id);

CREATE UNIQUE INDEX user_user_id_key ON public."user" USING btree (user_id);

CREATE UNIQUE INDEX user_pkey ON public."user" USING btree (id, user_id);

alter table "public"."profile" add constraint "profile_pkey" PRIMARY KEY using index "profile_pkey";

alter table "public"."user" add constraint "user_pkey" PRIMARY KEY using index "user_pkey";

alter table "public"."profile" add constraint "profile_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(user_id) ON UPDATE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_user_id_fkey";

alter table "public"."profile" add constraint "profile_user_id_key" UNIQUE using index "profile_user_id_key";

alter table "public"."user" add constraint "user_user_id_key" UNIQUE using index "user_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.fill_initial_user_profile_on_sign_up()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
insert into public.user(user_id, email) values (NEW.id, NEW.email);
insert into public.profile(user_id) values (NEW.id);
return NEW;
end;$function$
;

create policy "Enable insert for authenticated users only"
on "public"."profile"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for auth users based on their user_id"
on "public"."profile"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "each user has only access to his data"
on "public"."profile"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "user can access only his data"
on "public"."user"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));



